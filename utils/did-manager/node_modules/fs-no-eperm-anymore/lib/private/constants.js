"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fs_1 = tslib_1.__importDefault(require("fs"));
var util_1 = require("util");
// tslint:disable:object-literal-sort-keys
exports.DEFAULT_OPTIONS = Object.freeze({
    items: [
        {
            platforms: ["win32"],
            errorCodes: ["EPERM"],
            options: {
                retryIntervalMs: 100,
                retryTimeoutMs: 10 * 1000,
            },
        },
    ],
});
// tslint:enable:object-literal-sort-keys
var STUBS = Object.freeze({
    copyFile: function (src, dest, flags, cb) { return process.nextTick(cb); },
    lchmod: function (path, mode, cb) { return process.nextTick(cb); },
    lchown: function (path, uid, gid, cb) { return process.nextTick(cb); },
});
// in order to generate the d.ts files automatically functions mapping listed explicitly
exports.FUNCTIONS = Object.freeze({
    access: util_1.promisify(fs_1.default.access),
    appendFile: util_1.promisify(fs_1.default.appendFile),
    chmod: util_1.promisify(fs_1.default.chmod),
    chown: util_1.promisify(fs_1.default.chown),
    close: util_1.promisify(fs_1.default.close),
    copyFile: util_1.promisify(fs_1.default.copyFile || STUBS.copyFile),
    // exists: promisify(fs.exists), // deprecated
    fchmod: util_1.promisify(fs_1.default.fchmod),
    fchown: util_1.promisify(fs_1.default.fchown),
    fdatasync: util_1.promisify(fs_1.default.fdatasync),
    fstat: util_1.promisify(fs_1.default.fstat),
    fsync: util_1.promisify(fs_1.default.fsync),
    ftruncate: util_1.promisify(fs_1.default.ftruncate),
    futimes: util_1.promisify(fs_1.default.futimes),
    lchmod: util_1.promisify(fs_1.default.lchmod || STUBS.lchmod),
    lchown: util_1.promisify(fs_1.default.lchown || STUBS.lchown),
    lstat: util_1.promisify(fs_1.default.lstat),
    mkdir: util_1.promisify(fs_1.default.mkdir),
    mkdtemp: util_1.promisify(fs_1.default.mkdtemp),
    open: util_1.promisify(fs_1.default.open),
    read: util_1.promisify(fs_1.default.read),
    readFile: util_1.promisify(fs_1.default.readFile),
    readdir: util_1.promisify(fs_1.default.readdir),
    readlink: util_1.promisify(fs_1.default.readlink),
    realpath: util_1.promisify(fs_1.default.realpath),
    rename: util_1.promisify(fs_1.default.rename),
    rmdir: util_1.promisify(fs_1.default.rmdir),
    stat: util_1.promisify(fs_1.default.stat),
    symlink: util_1.promisify(fs_1.default.symlink),
    truncate: util_1.promisify(fs_1.default.truncate),
    unlink: util_1.promisify(fs_1.default.unlink),
    utimes: util_1.promisify(fs_1.default.utimes),
    write: util_1.promisify(fs_1.default.write),
    writeFile: util_1.promisify(fs_1.default.writeFile),
});
//# sourceMappingURL=constants.js.map
import * as Model from "./model";
import { StoreFsReference } from "./model";
import { TODO } from "./types";
export declare class Store<E extends Model.StoreEntity> implements Model.Store<E> {
    private readonly options;
    private readonly serialize;
    private readonly deserialize;
    constructor(options: Model.StoreOptionsInput<E>);
    get adapter(): Model.StoreAdapter | undefined;
    get file(): string;
    get fs(): Model.StoreFs;
    get optimisticLocking(): boolean;
    get validators(): Array<Model.StoreValidator<E>> | undefined;
    clone(opts?: Partial<Model.StoreOptions<E>>): Store<E>;
    readable(): Promise<boolean>;
    readExisting(options?: {
        adapter?: Model.StoreAdapter;
    }): Promise<E>;
    read(options?: {
        adapter?: Model.StoreAdapter;
    }): Promise<E | null>;
    write(data: E, options?: {
        readAdapter?: Model.StoreAdapter;
    }): Promise<E>;
    validate(data: E, messagePrefix?: string): Promise<void>;
    remove(): Promise<void>;
    protected resolveNewRevision(payloadData: E, readAdapter?: Model.StoreAdapter): Promise<number>;
    protected mkdirRecursive(value: string): Promise<void>;
    protected callbackifiedFsImpl(): Record<keyof StoreFsReference, (...params: TODO[]) => void>;
}
